B_init <- qr.coef(qrX, t(Z))
# initial estimated T
T_iter <- matrix(rowMeans(t(Z) - t(X) %*% B_init), nrow = 1)
# T_iter <- matrix(runif(n, min = 0, max = 10), nrow = 1)
# converge error control
vareps <- 10^(-7)
disT <- 1
disB <- 1
B_iter <- B_init
count <- 1
#
# B_iter <- rrr(Z.iter, t(X), penaltySVD = "ann",
#               modstr = list(gamma = gamma, nlambda = 1, lambda = lambda.seq[j]))$coef
# disB <- sum((B_init - B_iter)^2)
while (((disB > vareps) || (disT > vareps)) && (count < 100)) {
Z_iter <- t(Z) - t(T_iter) %*% t(matrix(rep(1, k), ncol = 1))
B_iter_next <- rrr(Z_iter, t(X), penaltySVD = "ann",
modstr = list(gamma = gamma, nlambda = 1, lambda = 100))$coef
B_iter_rank <- rrr(Z_iter, t(X), penaltySVD = "ann",
modstr = list(gamma = gamma, nlambda = 1, lambda = 100))$rank
#T_iter_next <- matrix(rowMeans(t(Z) - t(X) %*% B_iter_next), nrow = 1)
T_iter_next <- T
disT <- sum(abs(T_iter - T_iter_next))
disB <- sum(abs(B_iter - B_iter_next))
B_iter <- B_iter_next
T_iter <- T_iter_next
count <- count + 1
print(count)
print(T_iter[1:10])
}
Z.est <-  t(B_iter) %*% X + matrix(rep(1, k), ncol = 1) %*% T_iter
plot(B%*%X, t(B_iter) %*% X)
plot(T, T_iter)
B_iter_rank
while (((disB > vareps) || (disT > vareps)) && (count < 100)) {
Z_iter <- t(Z) - t(T_iter) %*% t(matrix(rep(1, k), ncol = 1))
B_iter_next <- rrr(Z_iter, t(X), penaltySVD = "ann",
modstr = list(gamma = gamma, nlambda = 1, lambda = 100))$coef
B_iter_rank <- rrr(Z_iter, t(X), penaltySVD = "ann",
modstr = list(gamma = gamma, nlambda = 1, lambda = 500))$rank
#T_iter_next <- matrix(rowMeans(t(Z) - t(X) %*% B_iter_next), nrow = 1)
T_iter_next <- T
disT <- sum(abs(T_iter - T_iter_next))
disB <- sum(abs(B_iter - B_iter_next))
B_iter <- B_iter_next
T_iter <- T_iter_next
count <- count + 1
print(count)
print(T_iter[1:10])
}
plot(B, t(B_iter))
plot(B, t(B_iter), xlim = c(-0.5, 0.5))
plot(B, t(B_iter), xlim = c(-0.5, 0.5), ylim = c(-1, 1))
svd(B_iter)$d
maxr <- 20
gamma <- 2
# initial estimated B
qrX <- qr(t(X), tol = 10^-7)
B_init <- qr.coef(qrX, t(Z))
# initial estimated T
T_iter <- matrix(rowMeans(t(Z) - t(X) %*% B_init), nrow = 1)
# T_iter <- matrix(runif(n, min = 0, max = 10), nrow = 1)
# converge error control
vareps <- 10^(-7)
disT <- 1
disB <- 1
B_iter <- B_init
count <- 1
#
# B_iter <- rrr(Z.iter, t(X), penaltySVD = "ann",
#               modstr = list(gamma = gamma, nlambda = 1, lambda = lambda.seq[j]))$coef
# disB <- sum((B_init - B_iter)^2)
while (((disB > vareps) || (disT > vareps)) && (count < 100)) {
Z_iter <- t(Z) - t(T_iter) %*% t(matrix(rep(1, k), ncol = 1))
B_iter_next <- rrr(Z_iter, t(X), penaltySVD = "ann",
modstr = list(gamma = gamma, nlambda = 1, lambda = 1))$coef
#B_iter_next <- t(B)
B_iter_rank <- rrr(Z_iter, t(X), penaltySVD = "ann",
modstr = list(gamma = gamma, nlambda = 1, lambda = 500))$rank
T_iter_next <- matrix(rowMeans(t(Z) - t(X) %*% B_iter_next), nrow = 1)
#T_iter_next <- T
disT <- sum(abs(T_iter - T_iter_next))
disB <- sum(abs(B_iter - B_iter_next))
B_iter <- B_iter_next
T_iter <- T_iter_next
count <- count + 1
print(count)
print(T_iter[1:10])
}
Z.est <-  t(B_iter) %*% X + matrix(rep(1, k), ncol = 1) %*% T_iter
B_iter_rank
maxr <- 20
gamma <- 2
# initial estimated B
qrX <- qr(t(X), tol = 10^-7)
B_init <- qr.coef(qrX, t(Z))
# initial estimated T
T_iter <- matrix(rowMeans(t(Z) - t(X) %*% B_init), nrow = 1)
# T_iter <- matrix(runif(n, min = 0, max = 10), nrow = 1)
# converge error control
vareps <- 10^(-7)
disT <- 1
disB <- 1
B_iter <- B_init
count <- 1
#
# B_iter <- rrr(Z.iter, t(X), penaltySVD = "ann",
#               modstr = list(gamma = gamma, nlambda = 1, lambda = lambda.seq[j]))$coef
# disB <- sum((B_init - B_iter)^2)
while (((disB > vareps) || (disT > vareps)) && (count < 100)) {
Z_iter <- t(Z) - t(T_iter) %*% t(matrix(rep(1, k), ncol = 1))
B_iter_next <- rrr(Z_iter, t(X), penaltySVD = "ann",
modstr = list(gamma = gamma, nlambda = 1, lambda = 1))$coef
#B_iter_next <- t(B)
B_iter_rank <- rrr(Z_iter, t(X), penaltySVD = "ann",
modstr = list(gamma = gamma, nlambda = 1, lambda = 1))$rank
T_iter_next <- matrix(rowMeans(t(Z) - t(X) %*% B_iter_next), nrow = 1)
#T_iter_next <- T
disT <- sum(abs(T_iter - T_iter_next))
disB <- sum(abs(B_iter - B_iter_next))
B_iter <- B_iter_next
T_iter <- T_iter_next
count <- count + 1
print(count)
print(T_iter[1:10])
}
Z.est <-  t(B_iter) %*% X + matrix(rep(1, k), ncol = 1) %*% T_iter
B_iter_rank
maxr <- 20
gamma <- 0
# initial estimated B
qrX <- qr(t(X), tol = 10^-7)
B_init <- qr.coef(qrX, t(Z))
# initial estimated T
T_iter <- matrix(rowMeans(t(Z) - t(X) %*% B_init), nrow = 1)
# T_iter <- matrix(runif(n, min = 0, max = 10), nrow = 1)
# converge error control
vareps <- 10^(-7)
disT <- 1
disB <- 1
B_iter <- B_init
count <- 1
#
# B_iter <- rrr(Z.iter, t(X), penaltySVD = "ann",
#               modstr = list(gamma = gamma, nlambda = 1, lambda = lambda.seq[j]))$coef
# disB <- sum((B_init - B_iter)^2)
while (((disB > vareps) || (disT > vareps)) && (count < 100)) {
Z_iter <- t(Z) - t(T_iter) %*% t(matrix(rep(1, k), ncol = 1))
B_iter_next <- rrr(Z_iter, t(X), penaltySVD = "ann",
modstr = list(gamma = gamma, nlambda = 1, lambda = 100))$coef
#B_iter_next <- t(B)
B_iter_rank <- rrr(Z_iter, t(X), penaltySVD = "ann",
modstr = list(gamma = gamma, nlambda = 1, lambda = 100))$rank
T_iter_next <- matrix(rowMeans(t(Z) - t(X) %*% B_iter_next), nrow = 1)
#T_iter_next <- T
disT <- sum(abs(T_iter - T_iter_next))
disB <- sum(abs(B_iter - B_iter_next))
B_iter <- B_iter_next
T_iter <- T_iter_next
count <- count + 1
print(count)
print(T_iter[1:10])
}
Z.est <-  t(B_iter) %*% X + matrix(rep(1, k), ncol = 1) %*% T_iter
maxr <- 20
gamma <- 0
# initial estimated B
qrX <- qr(t(X), tol = 10^-7)
B_init <- qr.coef(qrX, t(Z))
# initial estimated T
T_iter <- matrix(rowMeans(t(Z) - t(X) %*% B_init), nrow = 1)
# T_iter <- matrix(runif(n, min = 0, max = 10), nrow = 1)
# converge error control
vareps <- 10^(-7)
disT <- 1
disB <- 1
B_iter <- B_init
count <- 1
#
# B_iter <- rrr(Z.iter, t(X), penaltySVD = "ann",
#               modstr = list(gamma = gamma, nlambda = 1, lambda = lambda.seq[j]))$coef
# disB <- sum((B_init - B_iter)^2)
while (((disB > vareps) || (disT > vareps)) && (count < 100)) {
Z_iter <- t(Z) - t(T_iter) %*% t(matrix(rep(1, k), ncol = 1))
B_iter_next <- rrr(Z_iter, t(X), penaltySVD = "ann",
modstr = list(gamma = gamma, nlambda = 1, lambda = 1))$coef
#B_iter_next <- t(B)
B_iter_rank <- rrr(Z_iter, t(X), penaltySVD = "ann",
modstr = list(gamma = gamma, nlambda = 1, lambda = 1))$rank
T_iter_next <- matrix(rowMeans(t(Z) - t(X) %*% B_iter_next), nrow = 1)
#T_iter_next <- T
disT <- sum(abs(T_iter - T_iter_next))
disB <- sum(abs(B_iter - B_iter_next))
B_iter <- B_iter_next
T_iter <- T_iter_next
count <- count + 1
print(count)
print(T_iter[1:10])
}
B_iter_rank
svd(B_iter)$d
T
plot(T_iter,T)
maxr <- 20
gamma <- 0
# initial estimated B
qrX <- qr(t(X), tol = 10^-7)
B_init <- qr.coef(qrX, t(Z))
# initial estimated T
T_iter <- matrix(rowMeans(t(Z) - t(X) %*% B_init), nrow = 1)
# T_iter <- matrix(runif(n, min = 0, max = 10), nrow = 1)
# converge error control
vareps <- 10^(-7)
disT <- 1
disB <- 1
B_iter <- B_init
count <- 1
#
# B_iter <- rrr(Z.iter, t(X), penaltySVD = "ann",
#               modstr = list(gamma = gamma, nlambda = 1, lambda = lambda.seq[j]))$coef
# disB <- sum((B_init - B_iter)^2)
while (((disB > vareps) || (disT > vareps)) && (count < 100)) {
Z_iter <- t(Z) - t(T_iter) %*% t(matrix(rep(1, k), ncol = 1))
B_iter_next <- rrr(Z_iter, t(X), penaltySVD = "ann",
modstr = list(gamma = gamma, nlambda = 1, lambda = 1))$coef
#B_iter_next <- t(B)
# B_iter_rank <- rrr(Z_iter, t(X), penaltySVD = "ann",
#                    modstr = list(gamma = gamma, nlambda = 1, lambda = 1))$rank
#T_iter_next <- matrix(rowMeans(t(Z) - t(X) %*% B_iter_next), nrow = 1)
T_iter_next <- T
disT <- sum(abs(T_iter - T_iter_next))
disB <- sum(abs(B_iter - B_iter_next))
B_iter <- B_iter_next
T_iter <- T_iter_next
count <- count + 1
print(count)
print(T_iter[1:10])
}
svd(B_iter)$d
maxr <- 20
gamma <- 0
# initial estimated B
qrX <- qr(t(X), tol = 10^-7)
B_init <- qr.coef(qrX, t(Z))
# initial estimated T
T_iter <- matrix(rowMeans(t(Z) - t(X) %*% B_init), nrow = 1)
# T_iter <- matrix(runif(n, min = 0, max = 10), nrow = 1)
# converge error control
vareps <- 10^(-7)
disT <- 1
disB <- 1
B_iter <- B_init
count <- 1
#
# B_iter <- rrr(Z.iter, t(X), penaltySVD = "ann",
#               modstr = list(gamma = gamma, nlambda = 1, lambda = lambda.seq[j]))$coef
# disB <- sum((B_init - B_iter)^2)
while (((disB > vareps) || (disT > vareps)) && (count < 100)) {
Z_iter <- t(Z) - t(T_iter) %*% t(matrix(rep(1, k), ncol = 1))
B_iter_next <- rrr(Z_iter, t(X), penaltySVD = "ann",
modstr = list(gamma = gamma, nlambda = 1, lambda = 2))$coef
#B_iter_next <- t(B)
# B_iter_rank <- rrr(Z_iter, t(X), penaltySVD = "ann",
#                    modstr = list(gamma = gamma, nlambda = 1, lambda = 1))$rank
#T_iter_next <- matrix(rowMeans(t(Z) - t(X) %*% B_iter_next), nrow = 1)
T_iter_next <- T
disT <- sum(abs(T_iter - T_iter_next))
disB <- sum(abs(B_iter - B_iter_next))
B_iter <- B_iter_next
T_iter <- T_iter_next
count <- count + 1
print(count)
print(T_iter[1:10])
}
svd(B_iter)$d
svd(t(B_iter) %*% X)
svd(t(B_iter) %*% X)$d
maxr <- 20
gamma <- 0
# initial estimated B
qrX <- qr(t(X), tol = 10^-7)
B_init <- qr.coef(qrX, t(Z))
# initial estimated T
T_iter <- matrix(rowMeans(t(Z) - t(X) %*% B_init), nrow = 1)
# T_iter <- matrix(runif(n, min = 0, max = 10), nrow = 1)
# converge error control
vareps <- 10^(-7)
disT <- 1
disB <- 1
B_iter <- B_init
count <- 1
#
# B_iter <- rrr(Z.iter, t(X), penaltySVD = "ann",
#               modstr = list(gamma = gamma, nlambda = 1, lambda = lambda.seq[j]))$coef
# disB <- sum((B_init - B_iter)^2)
while (((disB > vareps) || (disT > vareps)) && (count < 100)) {
Z_iter <- t(Z) - t(T_iter) %*% t(matrix(rep(1, k), ncol = 1))
B_iter_next <- rrr(Z_iter, t(X), penaltySVD = "ann",
modstr = list(gamma = gamma, nlambda = 1, lambda = 30))$coef
#B_iter_next <- t(B)
# B_iter_rank <- rrr(Z_iter, t(X), penaltySVD = "ann",
#                    modstr = list(gamma = gamma, nlambda = 1, lambda = 1))$rank
#T_iter_next <- matrix(rowMeans(t(Z) - t(X) %*% B_iter_next), nrow = 1)
T_iter_next <- T
disT <- sum(abs(T_iter - T_iter_next))
disB <- sum(abs(B_iter - B_iter_next))
B_iter <- B_iter_next
T_iter <- T_iter_next
count <- count + 1
print(count)
print(T_iter[1:10])
}
svd(t(B_iter) %*% X)$d
plot(t(B_iter) %*% X, X %*% B)
plot(t(B_iter) %*% X, B %*% X)
svd(B %*% X)$d
svd(B_iter)$d
svd(B)$d
maxr <- 20
gamma <- 0
# initial estimated B
qrX <- qr(t(X), tol = 10^-7)
B_init <- qr.coef(qrX, t(Z))
# initial estimated T
T_iter <- matrix(rowMeans(t(Z) - t(X) %*% B_init), nrow = 1)
# T_iter <- matrix(runif(n, min = 0, max = 10), nrow = 1)
# converge error control
vareps <- 10^(-7)
disT <- 1
disB <- 1
B_iter <- B_init
count <- 1
#
# B_iter <- rrr(Z.iter, t(X), penaltySVD = "ann",
#               modstr = list(gamma = gamma, nlambda = 1, lambda = lambda.seq[j]))$coef
# disB <- sum((B_init - B_iter)^2)
while (((disB > vareps) || (disT > vareps)) && (count < 100)) {
Z_iter <- t(Z) - t(T_iter) %*% t(matrix(rep(1, k), ncol = 1))
B_iter_next <- rrr(Z_iter, t(X), penaltySVD = "ann",
modstr = list(gamma = gamma, nlambda = 1, lambda = 30))$coef
#B_iter_next <- t(B)
# B_iter_rank <- rrr(Z_iter, t(X), penaltySVD = "ann",
#                    modstr = list(gamma = gamma, nlambda = 1, lambda = 1))$rank
T_iter_next <- matrix(rowMeans(t(Z) - t(X) %*% B_iter_next), nrow = 1)
# T_iter_next <- T
disT <- sum(abs(T_iter - T_iter_next))
disB <- sum(abs(B_iter - B_iter_next))
B_iter <- B_iter_next
T_iter <- T_iter_next
count <- count + 1
print(count)
print(T_iter[1:10])
}
rrr()
rrr
?qr.fitted
maxr <- 20
gamma <- 0
# initial estimated B
qrX <- qr(t(X), tol = 10^-7)
B_init <- qr.coef(qrX, t(Z))
# initial estimated T
T_iter <- matrix(rowMeans(t(Z) - t(X) %*% B_init), nrow = 1)
# T_iter <- matrix(runif(n, min = 0, max = 10), nrow = 1)
# converge error control
vareps <- 10^(-7)
disT <- 1
disB <- 1
B_iter <- B_init
count <- 1
#
# B_iter <- rrr(Z.iter, t(X), penaltySVD = "ann",
#               modstr = list(gamma = gamma, nlambda = 1, lambda = lambda.seq[j]))$coef
# disB <- sum((B_init - B_iter)^2)
while (((disB > vareps) || (disT > vareps)) && (count < 100)) {
Z_iter <- t(Z) - t(T_iter) %*% t(matrix(rep(1, k), ncol = 1))
B_iter_next <- rrr(Z_iter, t(X), penaltySVD = "ann",
modstr = list(gamma = gamma, nlambda = 1, lambda = 10))$coef
#B_iter_next <- t(B)
# B_iter_rank <- rrr(Z_iter, t(X), penaltySVD = "ann",
#                    modstr = list(gamma = gamma, nlambda = 1, lambda = 1))$rank
T_iter_next <- matrix(rowMeans(t(Z) - t(X) %*% B_iter_next), nrow = 1)
# T_iter_next <- T
disT <- sum(abs(T_iter - T_iter_next))
disB <- sum(abs(B_iter - B_iter_next))
B_iter <- B_iter_next
T_iter <- T_iter_next
count <- count + 1
print(count)
print(T_iter[1:10])
}
maxr <- 20
gamma <- 0
# initial estimated B
qrX <- qr(t(X), tol = 10^-7)
B_init <- qr.coef(qrX, t(Z))
# initial estimated T
T_iter <- matrix(rowMeans(t(Z) - t(X) %*% B_init), nrow = 1)
# T_iter <- matrix(runif(n, min = 0, max = 10), nrow = 1)
# converge error control
vareps <- 10^(-7)
disT <- 1
disB <- 1
B_iter <- B_init
count <- 1
#
# B_iter <- rrr(Z.iter, t(X), penaltySVD = "ann",
#               modstr = list(gamma = gamma, nlambda = 1, lambda = lambda.seq[j]))$coef
# disB <- sum((B_init - B_iter)^2)
while (((disB > vareps) || (disT > vareps)) && (count < 100)) {
Z_iter <- t(Z) - t(T_iter) %*% t(matrix(rep(1, k), ncol = 1))
B_iter_next <- rrr(Z_iter, t(X), penaltySVD = "ann",
modstr = list(gamma = gamma, nlambda = 1, lambda = 40))$coef
#B_iter_next <- t(B)
# B_iter_rank <- rrr(Z_iter, t(X), penaltySVD = "ann",
#                    modstr = list(gamma = gamma, nlambda = 1, lambda = 1))$rank
T_iter_next <- matrix(rowMeans(t(Z) - t(X) %*% B_iter_next), nrow = 1)
# T_iter_next <- T
disT <- sum(abs(T_iter - T_iter_next))
disB <- sum(abs(B_iter - B_iter_next))
B_iter <- B_iter_next
T_iter <- T_iter_next
count <- count + 1
print(count)
print(T_iter[1:10])
}
knitr::opts_chunk$set(echo = TRUE, fig.width=4, fig.height=3.5)
library(xtable)
library(Sleuth3)
library(ggplot2)
library(broom)
qplot(UVB, Inhibit, data=ex1026, shape=Surface, color=Surface) +
geom_smooth(method="lm", se=FALSE, fullrange=TRUE)
M <- qf(0.95,4,13)
pred_dat <- data.frame(UVB=rep(c(0.02,0.04), times=2),
Surface=rep(c("Deep","Surface"), each=2))
Model1 <- lm(Inhibit~UVB*Surface, data=ex1026)
fits <- predict(Model1, newdata=pred_dat, se.fit=TRUE)
CIs <- with(fits, cbind(fit-M*se.fit, fit+M*se.fit))
colnames(CIs) <- c("Lower Bound", "Upper Bound")
colnames(pred_dat) <- c("UVB","Depth")
print(xtable(cbind(pred_dat,CIs), digits=c(0,2,2,3,3), caption="Scheffe Confidence Intervals"), comment=FALSE, include.rownames=FALSE)
summary(Model1)
library(ggplot2)
delays <- read_csv("http://vis.cwick.co.nz/data/all-summary.csv")
# see: 04-get-delay-summary.R for details of summarization
library(ggplot2)
delays <- read_csv("http://vis.cwick.co.nz/data/all-summary.csv")
library(ggplot2)
delays <- read.csv("http://vis.cwick.co.nz/data/all-summary.csv")
delays$DayOfWeek <- factor(delays$DayOfWeek,
levels = c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"))
# our plot for IAH
iah <- subset(delays, Origin == "IAH")
ggplot(iah, aes(DepHour, DayOfWeek)) +
geom_tile(aes(fill = prop_over_15))
# but now there are also flights from HOU
hou <- subset(delays, Origin == "HOU") %>%
filter(Origin == "HOU")
library(tidyverse)
library(ggplot2)
delays <- read.csv("http://vis.cwick.co.nz/data/all-summary.csv")
delays$DayOfWeek <- factor(delays$DayOfWeek,
levels = c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"))
# our plot for IAH
iah <- subset(delays, Origin == "IAH")
ggplot(iah, aes(DepHour, DayOfWeek)) +
geom_tile(aes(fill = prop_over_15))
# but now there are also flights from HOU
hou <- subset(delays, Origin == "HOU") %>%
filter(Origin == "HOU")
ggplot(hou, aes(DepHour, DayOfWeek)) +
geom_tile(aes(fill = prop_over_15))
head(delays)
delays
library(tidyverse)
delays <- read.csv("http://vis.cwick.co.nz/data/all-summary.csv")
# see: 04-get-delay-summary.R for details of summarization
delays$DayOfWeek <- factor(delays$DayOfWeek,
levels = c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"))
# our plot for IAH
iah <- subset(delays, Origin == "IAH")
ggplot(iah, aes(DepHour, DayOfWeek)) +
geom_tile(aes(fill = prop_over_15))
# but now there are also flights from HOU
colnames(delays)
unique(delays$DepHour)
unique(delays$Origin)
delays %>%
filter(between(DepHour, 20, 23) & !is.na(DepHour)) %>%
group_by(Origin, DayOfWeek, DepHour) %>%
summarise(
average_delay = mean(avg_delay)
) %>%
ungroup() %>%
as.data.frame() -> tidy_delay_data
ggplot(tidy_delay_data, aes(x = DepHour, fill = DayOfWeek)) +
geom_col(mapping = aes(y = average_delay), position = "dodge") +
labs(
title = "Average Delay Time past 8pm",
subtitle = "for HOU and IAH Airports",
x = "Hour of Departure",
y = "Average Delay (minutes)",
caption = "Hours are in military time"
) +
theme_bw() +
theme(
legend.title = element_blank(),
legend.position = "right"
) +
facet_grid(~ Origin) +
scale_fill_brewer(palette = "Accent")
