?contrasts
library(Sleuth3)
library(ggplot2)
library(dplyr)
seaweed <- case1301
M <- matrix(c(0, 0, -1/2, 1/2, -1/2, 1/2,
-1/2, -1/2, 1/2, 0, 1/2, 0,
1/3, -1/3, -1/3, -1/3, 1/3, 1/3,
1, -1, 1/2, 1/2, -1/2, -1/2,
0, 0, -1, 1, 1, -1),nrow=6,ncol=5)
M
M%*%solve(t(M)%*%M)
contrasts(seaweed$Treat)
contrasts(seaweed$Treat) <- M%*%solve(t(M)%*%M)
seaweed$Treat
summary(lm(logitCover~Treat+Block,data=seaweed))$coefficients
confint(lm(logitCover~Treat+Block,data=seaweed))
seaweed$logitCover <- with(case1301, log(Cover/(100-Cover)))
summary(lm(logitCover~Treat+Block,data=seaweed))$coefficients
confint(lm(logitCover~Treat+Block,data=seaweed))
Indicators <- contr.treatment(6)
Indicators
colnames(Indicators) <- names(Means)[-1]
Means <- with(seaweed, unlist(lapply(split(logitCover,Treat),mean)))
names(Means) <- names(summary(seaweed$Treat))
Means
names(Means)[-1]
colnames(Indicators) <- names(Means)[-1]
Indicators
contrasts(seaweed$Treat) <- Indicators
seaweed$Treat
exp（3）
exp(3)
setwd("F:/2020Spring/MS_project/05112020Simulation")
# Used library
library(mvtnorm)
library(expm)
library(MASS)
library(tidyverse)
set.seed(120733)
## ANN function
rrr <- function(X,Y,lambda,gamma = 0){
rrresult <- list()
#1 estimate C using LS estimator (generalized inverse is used)
Clhat <- ginv(t(X)%*%X)%*%t(X)%*% Y
#2 eigendecomposite of CLhar
Uhat <- svd(X%*%Clhat)$u
vhat <- svd(X%*%Clhat)$v
D <- diag(svd(X%*%Clhat)$d)
#3. weight for soft-thredshold and rank
weight <-  (svd(X%*%Clhat)$d)^(-gamma)
rrresult$weight <- weight
rrresult$r <-  sum(svd(X%*%Clhat)$d > lambda^(1/(gamma+1)))
#4. soft-thredsholding
diagvalue <-  svd(X%*%Clhat)$d -lambda*weight
th <- ifelse(diagvalue < 0, 0, diagvalue)
SDhat <-  diag(th)
rrresult$thd <- diagvalue
#5. low rank solution C
rrresult$CShat <-  Clhat %*% vhat %*% ginv(D) %*% SDhat %*% t(vhat)
return(rrresult)
}
# function to generate a random orthonormal matrix
rortho <- function(x){
return(qr.Q(qr(array(runif(x), dim = c(x,x)))))
}
# simulation settings
# sample size n (n person's data have been taken)
n <- 1000
# number of metabolites
m <- 100
# number of taxa
k <- 40
# rank of matrix B
r <- 10
# Generate X from Multivariate Noromal with identity variance and covariance matrix
X <- matrix(rnorm(m*n), nrow = m, ncol = n)
# Generate low-rank matrix B
sing.vals <- 5*((r:1)/r + 1/r)
B <- rortho(k)[,1:r] %*% diag(sing.vals) %*% rortho(m)[1:r,]
# Generate T vector from Unif(0, 10)
T <- matrix(runif(n, min = 0, max = 10), nrow = 1)
# Generate random error
E <- matrix(rnorm(k*n), nrow = k, ncol = n)
# Calculate our new Z = XB + 1T + E
Z <- B %*% X + matrix(rep(1, k), ncol = 1) %*% T + E
# convergence criterion
vareps <- 10^(-3)
# range of lambda
lambda.seq <- exp(seq(3, 3, 1))
rank.est <- rep(0, length(lambda.seq))
converge.iter <- rep(0, length(lambda.seq))
num_obj <- rep(0, length(lambda.seq))
for (i in 1: length(lambda.seq)) {
disT <- 1
disB <- 1
disXB <- 1
iter.count <- 1
# Randomize T from same distribution
T_iter <- matrix(runif(n, min = 0,  max = 10), nrow = 1)
# T_iter <- T_iter - mean(T_iter)
# Ramdomize T from different distribution
# T_iter <- matrix(rnorm(n, mean = 2,  sd = 3), nrow = 1)
# T_iter <- T_iter - mean(T_iter)
#
# Cneter True T
# T_iter <- T - mean(T)
Z_iter <- t(Z) - t(T_iter) %*% t(matrix(rep(1, k), ncol = 1))
B_iter <- rrr(t(X), Z_iter, lambda = lambda.seq[i])$CShat
while ((((disB > vareps) || (disT > vareps))  && ((disXB > vareps) || (disT > vareps))) && (iter.count < 3000)) {
T_iter_next <- matrix(rowMeans(t(Z) - t(X) %*% B_iter), nrow = 1)
# T_iter_next <- T
Z_iter <- t(Z) - t(T_iter_next) %*% t(matrix(rep(1, k), ncol = 1))
B_iter_next <- rrr(t(X), Z_iter, lambda = lambda.seq[i])$CShat
# B_iter_next <- t(B)
B_iter_next_rank <- rrr(t(X), Z_iter, lambda = lambda.seq[i])$r
iter_weight <- sort(rrr(t(X), Z_iter, lambda = lambda.seq[i])$weight)
disT <- sum((T_iter - T_iter_next)^2)
disB <- sum((B_iter - B_iter_next)^2)
disXB <- sum((t(B_iter) %*% X - t(B_iter_next) %*% X)^2)
Z.est <-  t(B_iter) %*% X + matrix(rep(1, k), ncol = 1) %*% T_iter
B_iter <- B_iter_next
T_iter <- T_iter_next
iter.count <- iter.count + 1
# print(iter.count)
}
rank.est[i] <- B_iter_next_rank
converge.iter[i] <- iter.count
num_obj[i] <- 1/2 * sum((t(Z) - t(X) %*% B_iter - t(T_iter) %*% matrix(rep(1, k), nrow = 1))^2) +
lambda.seq[i] * sum(iter_weight*svd(t(X) %*% B_iter)$d)
# save image for B matrix
png(paste0("plot-B-CenterRMT.png"))
plot(B, B_iter)
dev.off()
# save image for T matrix
png(paste0("plot-T-CenterRMT.png"))
plot(T, T_iter)
abline(a = 0, b = 1)
dev.off()
# save image for XB matrix
png(paste0("plot-XB-CenterRMT.png"))
plot(B %*% X, t(B_iter) %*% X)
abline(a = 0, b = 1)
dev.off()
# save image for Z matrix
png(paste0("plot-Z-CenterRMT.png"))
plot(Z, Z.est)
abline(a = 0, b = 1)
dev.off()
}
# num1 <- num_obj
# num2 <- num_obj
# num3 <- num_obj
num_obj
# Used library
library(mvtnorm)
library(expm)
library(MASS)
library(tidyverse)
set.seed(120733)
## ANN function
rrr <- function(X,Y,lambda,gamma = 0){
rrresult <- list()
#1 estimate C using LS estimator (generalized inverse is used)
Clhat <- ginv(t(X)%*%X)%*%t(X)%*% Y
#2 eigendecomposite of CLhar
Uhat <- svd(X%*%Clhat)$u
vhat <- svd(X%*%Clhat)$v
D <- diag(svd(X%*%Clhat)$d)
#3. weight for soft-thredshold and rank
weight <-  (svd(X%*%Clhat)$d)^(-gamma)
rrresult$weight <- weight
rrresult$r <-  sum(svd(X%*%Clhat)$d > lambda^(1/(gamma+1)))
#4. soft-thredsholding
diagvalue <-  svd(X%*%Clhat)$d -lambda*weight
th <- ifelse(diagvalue < 0, 0, diagvalue)
SDhat <-  diag(th)
rrresult$thd <- diagvalue
#5. low rank solution C
rrresult$CShat <-  Clhat %*% vhat %*% ginv(D) %*% SDhat %*% t(vhat)
return(rrresult)
}
# function to generate a random orthonormal matrix
rortho <- function(x){
return(qr.Q(qr(array(runif(x), dim = c(x,x)))))
}
# simulation settings
# sample size n (n person's data have been taken)
n <- 1000
# number of metabolites
m <- 100
# number of taxa
k <- 40
# rank of matrix B
r <- 10
# Generate X from Multivariate Noromal with identity variance and covariance matrix
X <- matrix(rnorm(m*n), nrow = m, ncol = n)
# Generate low-rank matrix B
sing.vals <- 5*((r:1)/r + 1/r)
B <- rortho(k)[,1:r] %*% diag(sing.vals) %*% rortho(m)[1:r,]
# Generate T vector from Unif(0, 10)
T <- matrix(runif(n, min = 0, max = 10), nrow = 1)
# Generate random error
E <- matrix(rnorm(k*n), nrow = k, ncol = n)
# Calculate our new Z = XB + 1T + E
Z <- B %*% X + matrix(rep(1, k), ncol = 1) %*% T + E
# convergence criterion
vareps <- 10^(-3)
# range of lambda
lambda.seq <- exp(seq(3, 3, 1))
rank.est <- rep(0, length(lambda.seq))
converge.iter <- rep(0, length(lambda.seq))
num_obj <- rep(0, length(lambda.seq))
for (i in 1: length(lambda.seq)) {
disT <- 1
disB <- 1
disXB <- 1
iter.count <- 1
# Randomize T from same distribution
T_iter <- matrix(runif(n, min = 0,  max = 10), nrow = 1)
T_iter <- T_iter - mean(T_iter)
# Ramdomize T from different distribution
# T_iter <- matrix(rnorm(n, mean = 2,  sd = 3), nrow = 1)
# T_iter <- T_iter - mean(T_iter)
#
# Cneter True T
# T_iter <- T - mean(T)
Z_iter <- t(Z) - t(T_iter) %*% t(matrix(rep(1, k), ncol = 1))
B_iter <- rrr(t(X), Z_iter, lambda = lambda.seq[i])$CShat
while ((((disB > vareps) || (disT > vareps))  && ((disXB > vareps) || (disT > vareps))) && (iter.count < 3000)) {
T_iter_next <- matrix(rowMeans(t(Z) - t(X) %*% B_iter), nrow = 1)
# T_iter_next <- T
Z_iter <- t(Z) - t(T_iter_next) %*% t(matrix(rep(1, k), ncol = 1))
B_iter_next <- rrr(t(X), Z_iter, lambda = lambda.seq[i])$CShat
# B_iter_next <- t(B)
B_iter_next_rank <- rrr(t(X), Z_iter, lambda = lambda.seq[i])$r
iter_weight <- sort(rrr(t(X), Z_iter, lambda = lambda.seq[i])$weight)
disT <- sum((T_iter - T_iter_next)^2)
disB <- sum((B_iter - B_iter_next)^2)
disXB <- sum((t(B_iter) %*% X - t(B_iter_next) %*% X)^2)
Z.est <-  t(B_iter) %*% X + matrix(rep(1, k), ncol = 1) %*% T_iter
B_iter <- B_iter_next
T_iter <- T_iter_next
iter.count <- iter.count + 1
# print(iter.count)
}
rank.est[i] <- B_iter_next_rank
converge.iter[i] <- iter.count
num_obj[i] <- 1/2 * sum((t(Z) - t(X) %*% B_iter - t(T_iter) %*% matrix(rep(1, k), nrow = 1))^2) +
lambda.seq[i] * sum(iter_weight*svd(t(X) %*% B_iter)$d)
# save image for B matrix
png(paste0("plot-B-CenterRMT.png"))
plot(B, B_iter)
dev.off()
# save image for T matrix
png(paste0("plot-T-CenterRMT.png"))
plot(T, T_iter)
abline(a = 0, b = 1)
dev.off()
# save image for XB matrix
png(paste0("plot-XB-CenterRMT.png"))
plot(B %*% X, t(B_iter) %*% X)
abline(a = 0, b = 1)
dev.off()
# save image for Z matrix
png(paste0("plot-Z-CenterRMT.png"))
plot(Z, Z.est)
abline(a = 0, b = 1)
dev.off()
}
# num1 <- num_obj
# num2 <- num_obj
# num3 <- num_obj
num_obj
