T_iter[1:10]
b[1:10]
(t(B_iter))[1:10, 1]
B2[1:2, 1:7]
t(B_iter)[1:2, 2:8]
(B2%*%X2)[1:2, 1:7]
(t(B_iter)[,-1]%*%X2)[1:2, 1:7]
num_obj
converge.iter
rank.est.rls <- rep(0, length(lambda.seq))
converge.iter.rls <- rep(0, length(lambda.seq))
num_obj.rls <- rep(0, length(lambda.seq))
for (i in 1: length(lambda.seq)) {
# initial estimated B
qrX <- qr(t(X), tol = 10^-7)
B_iter <- qr.coef(qrX, t(Z))
# initial estimated T (LS)
T_iter <- T_iter- mean(T_iter)
# T_iter <- T_iter1 - mean(T_iter1)
disT <- 1
disB <- 1
disXB <- 1
iter.count.rls <- 1
while ((((disB > vareps) || (disT > vareps))  && ((disXB > vareps) || (disT > vareps))) && (iter.count < 3000)) {
Z_iter_B <- t(Z) - T_iter %*% t(matrix(rep(1, k), ncol = 1))
B_iter_next <- rrr(t(X), Z_iter_B, lambda = lambda.seq[i])$CShat
B_iter_next_rank <- rrr(t(X), Z_iter_B, lambda = lambda.seq[i])$r
# Using RLS method
T_iter_next <- t(matrix(rowMeans(t(Z) - t(X) %*% B_iter), nrow = 1))
T_iter_next <- T_iter_next - mean(T_iter_next)
iter_weight <- sort(rrr(t(X), Z_iter_B, lambda = lambda.seq[i])$weight)
disT <- sum((T_iter - T_iter_next)^2)
disB <- sum((B_iter - B_iter_next)^2)
disXB <- sum((t(B_iter) %*% X - t(B_iter_next) %*% X)^2)
print(c(disT, disB, disXB))
print(sum(T_iter))
B_iter <- B_iter_next
T_iter <- T_iter_next
iter.count.rls <- iter.count.rls + 1
# print(iter.count)
}
rank.est.rls[i] <- B_iter_next_rank
converge.iter.rls[i] <- iter.count.rls
num_obj.rls[i] <- 1/2 * sum((t(Z) - t(X) %*% B_iter - T_iter %*% matrix(rep(1, k), nrow = 1))^2) +
lambda.seq[i] * sum(iter_weight*svd(t(X) %*% B_iter)$d)
Z.est <-  t(B_iter) %*% X + matrix(rep(1, k), ncol = 1) %*% t(T_iter)
# save image for B matrix
png(paste0("plot-B-rls-ls2rls2-wocT-gamma2.png"))
plot(B2, t(B_iter)[,-1])
abline(a = 0, b = 1)
dev.off()
# save image for XB matrix
png(paste0("plot-XB-rls-ls2rls2-wocT-gamma2.png"))
plot(B2 %*% X2, t(B_iter)[,-1] %*% X2)
abline(a = 0, b = 1)
dev.off()
# save image for T matrix
png(paste0("plot-T-rls-ls2rls2-wocT-gamma2.png"))
plot(T, T_iter)
abline(a = 0, b = 1)
dev.off()
# save image for T matrix
png(paste0("plot-beta-rls-ls2rls2-wocT-gamma2.png"))
plot(b, t(B_iter)[,1])
abline(a = 0, b = 1)
dev.off()
# save image for Z matrix
png(paste0("plot-Z-rls-ls2rls2-wocT-gamma2.png"))
plot(Z, Z.est)
abline(a = 0, b = 1)
dev.off()
}
T[1:10]
T_iter[1:10]
b[1:10]
(t(B_iter))[1:10, 1]
B2[1:2, 1:7]
t(B_iter)[1:2, 2:8]
(B2%*%X2)[1:2, 1:7]
(t(B_iter)[,-1]%*%X2)[1:2, 1:7]
num_obj.rls
converge.iter.rls
# Used library
library(mvtnorm)
library(expm)
library(MASS)
library(tidyverse)
set.seed(120733)
# set.seed(19911130)
## ANN function
rrr <- function(X,Y,lambda,gamma = 0){
rrresult <- list()
#1 estimate C using LS estimator (generalized inverse is used)
Clhat <- ginv(t(X)%*%X)%*%t(X)%*% Y
#2 eigendecomposite of CLhar
Uhat <- svd(X%*%Clhat)$u
vhat <- svd(X%*%Clhat)$v
D <- diag(svd(X%*%Clhat)$d)
#3. weight for soft-thredshold and rank
weight <-  (svd(X%*%Clhat)$d)^(-gamma)
rrresult$weight <- weight
rrresult$r <-  sum(svd(X%*%Clhat)$d > lambda^(1/(gamma+1)))
#4. soft-thredsholding
diagvalue <-  svd(X%*%Clhat)$d -lambda*weight
th <- ifelse(diagvalue < 0, 0, diagvalue)
SDhat <-  diag(th)
rrresult$thd <- diagvalue
#5. low rank solution C
rrresult$CShat <-  Clhat %*% vhat %*% ginv(D) %*% SDhat %*% t(vhat)
return(rrresult)
}
# function to generate a random orthonormal matrix
rortho <- function(x){
return(qr.Q(qr(array(runif(x), dim = c(x,x)))))
}
# simulation settings
# sample size n (n person's data have been taken)
n <- 1000
# number of metabolites
m <- 100
# number of taxa
k <- 40
# rank of matrix B
r <- 10
# Generate X from Multivariate Noromal with identity variance and covariance matrix
X <- matrix(c(rep(1, n), rnorm(m*n)), nrow = m+1, ncol = n, byrow = TRUE)
X2 <- X[-1,]
# Generate low-rank matrix B
sing.vals <- 5*((r:1)/r + 1/r)
B2 <- rortho(k)[,1:r] %*% diag(sing.vals) %*% rortho(m)[1:r,]
# Generate T vector from Unif(0, 10)
T <- matrix(runif(n, min = 0, max = 10), nrow = 1)
T <- T - mean(T)
# Generate b vector for intercept from N(0,1)
b <- matrix(rnorm(k), ncol = 1)
B <- as.matrix(cbind(b, B2))
# Generate random error
E <- matrix(rnorm(k*n), nrow = k, ncol = n)
# Calculate our new Z = XB + 1T + E
Z <- B %*% X + matrix(rep(1, k), ncol = 1) %*% T + E
# Z2 <- B2 %*% X2 + b %*% matrix(rep(1,n), nrow = 1)+  matrix(rep(1, k), ncol = 1) %*% T + E
# convergence criterion
vareps <- 10^(-3)
# range of lambda
lambda.seq <- exp(seq(3, 3, 1))
rank.est <- rep(0, length(lambda.seq))
converge.iter <- rep(0, length(lambda.seq))
num_obj <- rep(0, length(lambda.seq))
for (i in 1: length(lambda.seq)) {
# initial estimated B
qrX <- qr(t(X), tol = 10^-7)
B_iter <- qr.coef(qrX, t(Z))
# initial estimated T (LS)
T_iter <- t(matrix(rowMeans(t(Z) - t(X) %*% B_iter), nrow = 1))
# T_iter <- T_iter1 - mean(T_iter1)
disT <- 1
disB <- 1
disXB <- 1
iter.count <- 1
while ((((disB > vareps) || (disT > vareps))  && ((disXB > vareps) || (disT > vareps))) && (iter.count < 3000)) {
Z_iter_B <- t(Z) - T_iter %*% t(matrix(rep(1, k), ncol = 1))
B_iter_next <- rrr(t(X), Z_iter_B, lambda = lambda.seq[i])$CShat
B_iter_next_rank <- rrr(t(X), Z_iter_B, lambda = lambda.seq[i])$r
# Using LS method
T_iter_next <- t(matrix(rowMeans(t(Z) - t(X) %*% B_iter), nrow = 1))
iter_weight <- sort(rrr(t(X), Z_iter_B, lambda = lambda.seq[i])$weight)
disT <- sum((T_iter - T_iter_next)^2)
disB <- sum((B_iter - B_iter_next)^2)
disXB <- sum((t(B_iter) %*% X - t(B_iter_next) %*% X)^2)
print(c(disT, disB, disXB))
print(sum(T_iter))
B_iter <- B_iter_next
T_iter <- T_iter_next
iter.count <- iter.count + 1
# print(iter.count)
}
rank.est[i] <- B_iter_next_rank
converge.iter[i] <- iter.count
num_obj[i] <- 1/2 * sum((t(Z) - t(X) %*% B_iter - T_iter %*% matrix(rep(1, k), nrow = 1))^2) +
lambda.seq[i] * sum(iter_weight*svd(t(X) %*% B_iter)$d)
Z.est <-  t(B_iter) %*% X + matrix(rep(1, k), ncol = 1) %*% t(T_iter)
# save image for B matrix
png(paste0("plot-B-ls-ls2rls3-cT-gamma2.png"))
plot(B2, t(B_iter)[,-1])
abline(a = 0, b = 1)
dev.off()
# save image for XB matrix
png(paste0("plot-XB-ls-ls2rls3-cT-gamma2.png"))
plot(B2 %*% X2, t(B_iter)[,-1] %*% X2)
abline(a = 0, b = 1)
dev.off()
# save image for T matrix
png(paste0("plot-T-ls-ls2rls3-cT-gamma2.png"))
plot(T, T_iter)
abline(a = 0, b = 1)
dev.off()
# save image for T matrix
png(paste0("plot-beta-ls-ls2rls3-cT-gamma2.png"))
plot(b, t(B_iter)[,1])
abline(a = 0, b = 1)
dev.off()
# save image for Z matrix
png(paste0("plot-Z-ls-ls2rls3-cT-gamma2.png"))
plot(Z, Z.est)
abline(a = 0, b = 1)
dev.off()
}
T[1:10]
T_iter[1:10]
b[1:10]
(t(B_iter))[1:10, 1]
B2[1:2, 1:7]
t(B_iter)[1:2, 2:8]
(B2%*%X2)[1:2, 1:7]
(t(B_iter)[,-1]%*%X2)[1:2, 1:7]
num_obj
converge.iter
rank.est.rls <- rep(0, length(lambda.seq))
converge.iter.rls <- rep(0, length(lambda.seq))
num_obj.rls <- rep(0, length(lambda.seq))
#RLS method start
for (i in 1: length(lambda.seq)) {
# initial estimated B
qrX <- qr(t(X2), tol = 10^-7)
B_iter <- qr.coef(qrX, t(Z))
# initial estimated b
# set.seed(Sys.time())
b_iter <- matrix(rnorm(k), ncol = 1)
# initial estimated T (RLS)
T_iter <- T_iter - mean(T_iter)
disT <- 1
disB <- 1
disbeta <- 1
disXB <- 1
iter.count.rls <- 1
while ((((disB > vareps) || (disT > vareps) || (disbeta > vareps))  && ((disXB > vareps) || (disT > vareps) || (disbeta > vareps))) && (iter.count.rls < 3000)) {
Z_iter_B <- t(Z) - T_iter %*% t(matrix(rep(1, k), ncol = 1)) - t(b_iter %*% matrix(rep(1,n), nrow = 1))
B_iter_next <- rrr(t(X2), Z_iter_B, lambda = lambda.seq[i])$CShat
B_iter_next_rank <- rrr(t(X2), Z_iter_B, lambda = lambda.seq[i])$r
Z_iter_b <- t(Z) - t(X2) %*% B_iter - T_iter %*% t(matrix(rep(1, k), ncol = 1))
b_iter_next <- t(1/n * (matrix(rep(1, n), nrow = 1) %*% Z_iter_b))
T_iter_next <- t(matrix(rowMeans(t(Z) - t(X2) %*% B_iter), nrow = 1))
T_iter_next <- T_iter_next - mean(T_iter_next)
iter_weight <- sort(rrr(t(X2), Z_iter_B, lambda = lambda.seq[i])$weight)
disT <- sum((T_iter - T_iter_next)^2)
disB <- sum((B_iter - B_iter_next)^2)
disbeta <- sum((b_iter - b_iter_next)^2)
disXB <- sum((t(B_iter) %*% X2 - t(B_iter_next) %*% X2)^2)
print(c(disT, disB, disXB, disbeta))
print(sum(T_iter))
B_iter <- B_iter_next
T_iter <- T_iter_next
b_iter <- b_iter_next
iter.count.rls <- iter.count.rls + 1
# print(iter.count)
}
rank.est.rls[i] <- B_iter_next_rank
converge.iter.rls[i] <- iter.count.rls
num_obj.rls[i] <- 1/2 * sum((t(Z) - t(X2) %*% B_iter - T_iter %*% matrix(rep(1, k), nrow = 1) - t(b_iter %*% matrix(rep(1,n), nrow = 1)))^2) +
lambda.seq[i] * sum(iter_weight*svd(t(X2) %*% B_iter)$d)
Z.est <-  t(B_iter) %*% X2 + matrix(rep(1, k), ncol = 1) %*% t(T_iter) +  b_iter %*% matrix(rep(1, n), nrow = 1)
# save image for B matrix
png(paste0("plot-B-rls-ls2rls3-cT-gamma2.png"))
plot(B2, t(B_iter))
abline(a = 0, b = 1)
dev.off()
# save image for XB matrix
png(paste0("plot-XB-rls-ls2rls3-cT-gamma2.png"))
plot(B2 %*% X2, t(B_iter) %*% X2)
abline(a = 0, b = 1)
dev.off()
# save image for T matrix
png(paste0("plot-T-rls-ls2rls3-cT-gamma2.png"))
plot(T, T_iter)
abline(a = 0, b = 1)
dev.off()
# save image for T matrix
png(paste0("plot-beta-rls-ls2rls3-cT-gamma2.png"))
plot(b, b_iter)
abline(a = 0, b = 1)
dev.off()
# save image for Z matrix
png(paste0("plot-Z-rls-ls2rls3-cT-gamma2.png"))
plot(Z, Z.est)
abline(a = 0, b = 1)
dev.off()
}
T[1:10]
T_iter[1:10]
b[1:10]
b_iter[1:10]
B2[1:2, 1:7]
t(B_iter)[1:2, 1:7]
(B2%*%X2)[1:2, 1:7]
(t(B_iter)%*%X2)[1:2, 1:7]
num_obj.rls
converge.iter.rls
# Used library
library(mvtnorm)
library(expm)
library(MASS)
library(tidyverse)
set.seed(120733)
# set.seed(19911130)
## ANN function
rrr <- function(X,Y,lambda,gamma = 0){
rrresult <- list()
#1 estimate C using LS estimator (generalized inverse is used)
Clhat <- ginv(t(X)%*%X)%*%t(X)%*% Y
#2 eigendecomposite of CLhar
Uhat <- svd(X%*%Clhat)$u
vhat <- svd(X%*%Clhat)$v
D <- diag(svd(X%*%Clhat)$d)
#3. weight for soft-thredshold and rank
weight <-  (svd(X%*%Clhat)$d)^(-gamma)
rrresult$weight <- weight
rrresult$r <-  sum(svd(X%*%Clhat)$d > lambda^(1/(gamma+1)))
#4. soft-thredsholding
diagvalue <-  svd(X%*%Clhat)$d -lambda*weight
th <- ifelse(diagvalue < 0, 0, diagvalue)
SDhat <-  diag(th)
rrresult$thd <- diagvalue
#5. low rank solution C
rrresult$CShat <-  Clhat %*% vhat %*% ginv(D) %*% SDhat %*% t(vhat)
return(rrresult)
}
# function to generate a random orthonormal matrix
rortho <- function(x){
return(qr.Q(qr(array(runif(x), dim = c(x,x)))))
}
# simulation settings
# sample size n (n person's data have been taken)
n <- 1000
# number of metabolites
m <- 100
# number of taxa
k <- 40
# rank of matrix B
r <- 10
# Generate X from Multivariate Noromal with identity variance and covariance matrix
X <- matrix(c(rep(1, n), rnorm(m*n)), nrow = m+1, ncol = n, byrow = TRUE)
X2 <- X[-1,]
# Generate low-rank matrix B
sing.vals <- 5*((r:1)/r + 1/r)
B2 <- rortho(k)[,1:r] %*% diag(sing.vals) %*% rortho(m)[1:r,]
# Generate T vector from Unif(0, 10)
T <- matrix(runif(n, min = 0, max = 10), nrow = 1)
# T <- T - mean(T)
# Generate b vector for intercept from N(0,1)
b <- matrix(rnorm(k), ncol = 1)
B <- as.matrix(cbind(b, B2))
# Generate random error
E <- matrix(rnorm(k*n), nrow = k, ncol = n)
# Calculate our new Z = XB + 1T + E
Z <- B %*% X + matrix(rep(1, k), ncol = 1) %*% T + E
# Z2 <- B2 %*% X2 + b %*% matrix(rep(1,n), nrow = 1)+  matrix(rep(1, k), ncol = 1) %*% T + E
# convergence criterion
vareps <- 10^(-3)
# range of lambda
lambda.seq <- exp(seq(3, 3, 1))
rank.est <- rep(0, length(lambda.seq))
converge.iter <- rep(0, length(lambda.seq))
num_obj <- rep(0, length(lambda.seq))
for (i in 1: length(lambda.seq)) {
# initial estimated B
qrX <- qr(t(X), tol = 10^-7)
B_iter <- qr.coef(qrX, t(Z))
# initial estimated T (LS)
T_iter <- t(matrix(rowMeans(t(Z) - t(X) %*% B_iter), nrow = 1))
# T_iter <- T_iter1 - mean(T_iter1)
disT <- 1
disB <- 1
disXB <- 1
iter.count <- 1
while ((((disB > vareps) || (disT > vareps))  && ((disXB > vareps) || (disT > vareps))) && (iter.count < 3000)) {
Z_iter_B <- t(Z) - T_iter %*% t(matrix(rep(1, k), ncol = 1))
B_iter_next <- rrr(t(X), Z_iter_B, lambda = lambda.seq[i])$CShat
B_iter_next_rank <- rrr(t(X), Z_iter_B, lambda = lambda.seq[i])$r
# Using LS method
T_iter_next <- t(matrix(rowMeans(t(Z) - t(X) %*% B_iter), nrow = 1))
iter_weight <- sort(rrr(t(X), Z_iter_B, lambda = lambda.seq[i])$weight)
disT <- sum((T_iter - T_iter_next)^2)
disB <- sum((B_iter - B_iter_next)^2)
disXB <- sum((t(B_iter) %*% X - t(B_iter_next) %*% X)^2)
print(c(disT, disB, disXB))
print(sum(T_iter))
B_iter <- B_iter_next
T_iter <- T_iter_next
iter.count <- iter.count + 1
# print(iter.count)
}
rank.est[i] <- B_iter_next_rank
converge.iter[i] <- iter.count
num_obj[i] <- 1/2 * sum((t(Z) - t(X) %*% B_iter - T_iter %*% matrix(rep(1, k), nrow = 1))^2) +
lambda.seq[i] * sum(iter_weight*svd(t(X) %*% B_iter)$d)
Z.est <-  t(B_iter) %*% X + matrix(rep(1, k), ncol = 1) %*% t(T_iter)
# save image for B matrix
png(paste0("plot-B-ls-ls2rls3-cT-gamma2.png"))
plot(B2, t(B_iter)[,-1])
abline(a = 0, b = 1)
dev.off()
# save image for XB matrix
png(paste0("plot-XB-ls-ls2rls3-cT-gamma2.png"))
plot(B2 %*% X2, t(B_iter)[,-1] %*% X2)
abline(a = 0, b = 1)
dev.off()
# save image for T matrix
png(paste0("plot-T-ls-ls2rls3-cT-gamma2.png"))
plot(T, T_iter)
abline(a = 0, b = 1)
dev.off()
# save image for T matrix
png(paste0("plot-beta-ls-ls2rls3-cT-gamma2.png"))
plot(b, t(B_iter)[,1])
abline(a = 0, b = 1)
dev.off()
# save image for Z matrix
png(paste0("plot-Z-ls-ls2rls3-cT-gamma2.png"))
plot(Z, Z.est)
abline(a = 0, b = 1)
dev.off()
}
T[1:10]
T_iter[1:10]
b[1:10]
(t(B_iter))[1:10, 1]
B2[1:2, 1:7]
t(B_iter)[1:2, 2:8]
(B2%*%X2)[1:2, 1:7]
(t(B_iter)[,-1]%*%X2)[1:2, 1:7]
num_obj
converge.iter
rank.est.rls <- rep(0, length(lambda.seq))
converge.iter.rls <- rep(0, length(lambda.seq))
num_obj.rls <- rep(0, length(lambda.seq))
#RLS method start
for (i in 1: length(lambda.seq)) {
# initial estimated B
qrX <- qr(t(X2), tol = 10^-7)
B_iter <- qr.coef(qrX, t(Z))
# initial estimated b
# set.seed(Sys.time())
b_iter <- matrix(rnorm(k), ncol = 1)
# initial estimated T (RLS)
T_iter <- T_iter - mean(T_iter)
disT <- 1
disB <- 1
disbeta <- 1
disXB <- 1
iter.count.rls <- 1
while ((((disB > vareps) || (disT > vareps) || (disbeta > vareps))  && ((disXB > vareps) || (disT > vareps) || (disbeta > vareps))) && (iter.count.rls < 3000)) {
Z_iter_B <- t(Z) - T_iter %*% t(matrix(rep(1, k), ncol = 1)) - t(b_iter %*% matrix(rep(1,n), nrow = 1))
B_iter_next <- rrr(t(X2), Z_iter_B, lambda = lambda.seq[i])$CShat
B_iter_next_rank <- rrr(t(X2), Z_iter_B, lambda = lambda.seq[i])$r
Z_iter_b <- t(Z) - t(X2) %*% B_iter - T_iter %*% t(matrix(rep(1, k), ncol = 1))
b_iter_next <- t(1/n * (matrix(rep(1, n), nrow = 1) %*% Z_iter_b))
T_iter_next <- t(matrix(rowMeans(t(Z) - t(X2) %*% B_iter), nrow = 1))
T_iter_next <- T_iter_next - mean(T_iter_next)
iter_weight <- sort(rrr(t(X2), Z_iter_B, lambda = lambda.seq[i])$weight)
disT <- sum((T_iter - T_iter_next)^2)
disB <- sum((B_iter - B_iter_next)^2)
disbeta <- sum((b_iter - b_iter_next)^2)
disXB <- sum((t(B_iter) %*% X2 - t(B_iter_next) %*% X2)^2)
print(c(disT, disB, disXB, disbeta))
print(sum(T_iter))
B_iter <- B_iter_next
T_iter <- T_iter_next
b_iter <- b_iter_next
iter.count.rls <- iter.count.rls + 1
# print(iter.count)
}
rank.est.rls[i] <- B_iter_next_rank
converge.iter.rls[i] <- iter.count.rls
num_obj.rls[i] <- 1/2 * sum((t(Z) - t(X2) %*% B_iter - T_iter %*% matrix(rep(1, k), nrow = 1) - t(b_iter %*% matrix(rep(1,n), nrow = 1)))^2) +
lambda.seq[i] * sum(iter_weight*svd(t(X2) %*% B_iter)$d)
Z.est <-  t(B_iter) %*% X2 + matrix(rep(1, k), ncol = 1) %*% t(T_iter) +  b_iter %*% matrix(rep(1, n), nrow = 1)
# save image for B matrix
png(paste0("plot-B-rls-ls2rls3-cT-gamma2.png"))
plot(B2, t(B_iter))
abline(a = 0, b = 1)
dev.off()
# save image for XB matrix
png(paste0("plot-XB-rls-ls2rls3-cT-gamma2.png"))
plot(B2 %*% X2, t(B_iter) %*% X2)
abline(a = 0, b = 1)
dev.off()
# save image for T matrix
png(paste0("plot-T-rls-ls2rls3-cT-gamma2.png"))
plot(T, T_iter)
abline(a = 0, b = 1)
dev.off()
# save image for T matrix
png(paste0("plot-beta-rls-ls2rls3-cT-gamma2.png"))
plot(b, b_iter)
abline(a = 0, b = 1)
dev.off()
# save image for Z matrix
png(paste0("plot-Z-rls-ls2rls3-cT-gamma2.png"))
plot(Z, Z.est)
abline(a = 0, b = 1)
dev.off()
}
T[1:10]
T_iter[1:10]
b[1:10]
b_iter[1:10]
B2[1:2, 1:7]
t(B_iter)[1:2, 1:7]
(B2%*%X2)[1:2, 1:7]
(t(B_iter)%*%X2)[1:2, 1:7]
num_obj.rls
converge.iter.rls
